#!/usr/bin/env node
"use strict";
var debug    = require('debug')('quintro:server');
var appUtils = require('../lib/utils/app');

appUtils.configFilesToEnvironment();

if (process.env.IS_HEROKU) {
	debug('Running setup for Heroku');
	require('../heroku-setup');
}

var config = require('../lib/utils/config-manager');

if (!config.app.logging.useConsole) {
	process.on('uncaughtException', function(ex) {
		appUtils.logFatalException(
			ex,
			"logs/server-crash.log",
			function() {
				process.exit(1);
			}
		);
	});
}

/**
 * Module dependencies.
 */

var quintroApp = require('../app');
var config     = require('../lib/utils/config-manager');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.app.address.port || '7000');
quintroApp.app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */

quintroApp.server.listen(port);
quintroApp.server.on('error', onError);
quintroApp.server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ?
		'Pipe ' + port :
		'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = quintroApp.server.address();
	var bind = typeof addr === 'string' ?
		'pipe ' + addr :
		'port ' + addr.port;
	debug('Listening on ' + bind);
}
